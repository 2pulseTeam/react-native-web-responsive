import * as react from 'react';
import { DeclarativeStyle, RNsponsiveFinalTheme, FunctionStyle, ResponsiveComponent } from '../types.js';
import { ViewStyle, ViewProps, TextStyle, TextProps, ModalProps, ImageStyle, ImageProps, SwitchProps, TextInputProps, ScrollViewProps, ImageBackgroundProps, TouchableOpacityProps, ActivityIndicatorProps, KeyboardAvoidingViewProps, TouchableHighlightProps } from 'react-native';

declare const _default: {
    View: <C>(styleAsObjectOrFunc: DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme> | FunctionStyle<C, DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme>>) => react.ForwardRefExoticComponent<react.PropsWithoutRef<ResponsiveComponent<ViewProps, C>> & react.RefAttributes<react.LegacyRef<unknown>>>;
    Text: <C_1>(styleAsObjectOrFunc: DeclarativeStyle<TextStyle, RNsponsiveFinalTheme> | FunctionStyle<C_1, DeclarativeStyle<TextStyle, RNsponsiveFinalTheme>>) => react.ForwardRefExoticComponent<react.PropsWithoutRef<ResponsiveComponent<TextProps, C_1>> & react.RefAttributes<react.LegacyRef<unknown>>>;
    Modal: <C_2>(styleAsObjectOrFunc: DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme> | FunctionStyle<C_2, DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme>>) => react.ForwardRefExoticComponent<react.PropsWithoutRef<ResponsiveComponent<ModalProps, C_2>> & react.RefAttributes<react.LegacyRef<unknown>>>;
    Image: <C_3>(styleAsObjectOrFunc: DeclarativeStyle<ImageStyle, RNsponsiveFinalTheme> | FunctionStyle<C_3, DeclarativeStyle<ImageStyle, RNsponsiveFinalTheme>>) => react.ForwardRefExoticComponent<react.PropsWithoutRef<ResponsiveComponent<ImageProps, C_3>> & react.RefAttributes<react.LegacyRef<unknown>>>;
    Switch: <C_4>(styleAsObjectOrFunc: DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme> | FunctionStyle<C_4, DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme>>) => react.ForwardRefExoticComponent<react.PropsWithoutRef<ResponsiveComponent<SwitchProps, C_4>> & react.RefAttributes<react.LegacyRef<unknown>>>;
    TextInput: <C_5>(styleAsObjectOrFunc: DeclarativeStyle<TextStyle, RNsponsiveFinalTheme> | FunctionStyle<C_5, DeclarativeStyle<TextStyle, RNsponsiveFinalTheme>>) => react.ForwardRefExoticComponent<react.PropsWithoutRef<ResponsiveComponent<TextInputProps, C_5>> & react.RefAttributes<react.LegacyRef<unknown>>>;
    SafeAreaView: <C>(styleAsObjectOrFunc: DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme> | FunctionStyle<C, DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme>>) => react.ForwardRefExoticComponent<react.PropsWithoutRef<ResponsiveComponent<ViewProps, C>> & react.RefAttributes<react.LegacyRef<unknown>>>;
    ScrollView: <C_6>(styleAsObjectOrFunc: DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme> | FunctionStyle<C_6, DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme>>) => react.ForwardRefExoticComponent<react.PropsWithoutRef<ResponsiveComponent<ScrollViewProps, C_6>> & react.RefAttributes<react.LegacyRef<unknown>>>;
    ImageBackground: <C_7>(styleAsObjectOrFunc: DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme> | FunctionStyle<C_7, DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme>>) => react.ForwardRefExoticComponent<react.PropsWithoutRef<ResponsiveComponent<ImageBackgroundProps, C_7>> & react.RefAttributes<react.LegacyRef<unknown>>>;
    TouchableOpacity: <C_8>(styleAsObjectOrFunc: DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme> | FunctionStyle<C_8, DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme>>) => react.ForwardRefExoticComponent<react.PropsWithoutRef<ResponsiveComponent<TouchableOpacityProps, C_8>> & react.RefAttributes<react.LegacyRef<unknown>>>;
    ActivityIndicator: <C_9>(styleAsObjectOrFunc: DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme> | FunctionStyle<C_9, DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme>>) => react.ForwardRefExoticComponent<react.PropsWithoutRef<ResponsiveComponent<ActivityIndicatorProps, C_9>> & react.RefAttributes<react.LegacyRef<unknown>>>;
    KeyboardAvoidingView: <C_10>(styleAsObjectOrFunc: DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme> | FunctionStyle<C_10, DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme>>) => react.ForwardRefExoticComponent<react.PropsWithoutRef<ResponsiveComponent<KeyboardAvoidingViewProps, C_10>> & react.RefAttributes<react.LegacyRef<unknown>>>;
    TouchableHighlight: <C_11>(styleAsObjectOrFunc: DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme> | FunctionStyle<C_11, DeclarativeStyle<ViewStyle, RNsponsiveFinalTheme>>) => react.ForwardRefExoticComponent<react.PropsWithoutRef<ResponsiveComponent<TouchableHighlightProps, C_11>> & react.RefAttributes<react.LegacyRef<unknown>>>;
};

export { _default as default };
